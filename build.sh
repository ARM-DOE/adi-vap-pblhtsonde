#!/bin/bash

proctype='vap'
process='pblhtsonde'
execname=$process

idl_dir=/apps/base/idl/idl86

if [ -z "$ADI_HOME" ]; then
    ADI_HOME=/apps/ds
fi

if [ -z "$APPS_DS" ]; then
    APPS_DS=/apps/ds
fi

# Print usage

script_name=$0

usage()
{
    cat <<EOM

DESCRIPTION

  Build script used to install this package.

SYNOPSIS

  $script_name [--prefix=path [--destdir=path]] [--conf] [--exec] [--idldir=path]

OPTIONS

  --prefix=path   absolute path to installation directory
                  default: \$VAP_HOME

  --destdir=path  absolute path prepended to prefix 
                  used to perform a staged installation

  --idldir=path   absolute path to top level IDL installation directory
                  default: \$idl_dir

  --conf          only install the conf files

  --exec          only install the executable

  --uninstall     uninstall files

  -h, --help      display this help message

EOM
}

# Parse command line 

for i in "$@"
do
    case $i in
        --destdir=*)  destdir="${i#*=}"
                      ;;
        --prefix=*)   prefix="${i#*=}"
                      ;;
        --idldir=*)   idl_dir="${i#*=}"
                      ;;
        --conf)       conf_only=true
                      ;;
        --exec)       exec_only=true
                      ;;
        --uninstall)  uninstall=true
                      ;;
        -h | --help)  usage
                      exit
                      ;;
        *)            usage
                      exit 1
                      ;;
    esac
done

if [ $destdir ] && [ ! $prefix ]; then
   usage
   exit 1
fi

# Get prefix from environemnt variable if it wasn't specified

if [ ! $prefix ]; then
    if [ $VAP_HOME ]; then
        prefix=$VAP_HOME
    else
        usage
        exit 1
    fi
fi

# Get IDL version number from IDL installation directory

idl_version=$(echo $idl_dir | grep -Eo '[0-9]+$')
idlnn=idl$idl_version
IDLnn=IDL$idl_version

# Get package version

name=$BUILD_PACKAGE_NAME
if [ -z "$name" ]; then
    name="$proctype-$process"
fi

version=$BUILD_PACKAGE_VERSION
if [ -z "$version" ]; then
    version=`./package/get_package_version.sh`
fi

version="$name-$version"

echo "------------------------------------------------------------------"

if [ $destdir ]; then
    echo "destdir: $destdir"
fi

echo "prefix:  $prefix"
echo "version: $version"

# Function to echo and run commands

run() {
    echo "> $1"
    $1 || exit 1
}

# Install conf files

if [ ! $exec_only ] && [ -d conf ]; then

    echo "------------------------------------------------------------------"
    confdir="$destdir$prefix/conf/$proctype"
    if [ ! -d $confdir ]; then
        run "mkdir -p $confdir"
    fi

    files=();
    cd conf
    shopt -s nullglob
    for f in *
    do
        if [ -d $f ] && [ -e $f/$f.process ]; then

            echo "confdir: $confdir/$f"
            run "rm -rf $confdir/$f"

            if [ ! $uninstall ]; then
                run "cp -R $f $confdir"
            fi
        else
            files+=( $f )
        fi
    done

    if [ $files ]; then

        confdir+="/$process"
        echo "confdir: $confdir"
        run "rm -rf $confdir"

        if [ ! $uninstall ]; then
            run "mkdir -p $confdir"
            for f in ${files[@]}
            do
                run "cp -R $f $confdir"
            done
        fi
    fi

    cd ..
fi

if [ $conf_only ]; then
    exit 0
fi

# Install IDL .sav file

echo "------------------------------------------------------------------"
bindir="$destdir$prefix/bin"
objdir="$destdir$prefix/bytecode"
sav_file="${execname}.sav"

echo "bindir:  $bindir"
echo "objdir:  $objdir"

if [ $uninstall ]; then

    run "rm -f $objdir/$sav_file"

    cd src
    shopt -s nullglob
    for f in *.sh.in
    do
        outfile=${f%.sh.in}
        run "rm -f $bindir/$outfile"
    done
    cd ..

    exit 0
fi

if [ ! -d $bindir ]; then
    run "mkdir -p $bindir"
fi

if [ ! -d $objdir ]; then
    run "mkdir -p $objdir"
fi

# Set IDL_DLM_PATH for ADI bindings

ADI_DLM="${ADI_HOME}/lib64"
if [ "$idlnn" != "idl82" ]; then
    ADI_DLM="${ADI_DLM}/${idlnn}"
fi

export IDL_DLM_PATH="${ADI_DLM}:<IDL_DEFAULT>"

# Set IDL environment

export IDL_DIR=$idl_dir
export IDL_PATH="+${IDL_DIR}/lib"
export IDL_PATH="+${APPS_DS}/lib:${IDL_PATH}"
export IDL_PATH="+${ADI_DLM}:${IDL_PATH}"

echo "IDL_DIR:      $IDL_DIR"
echo "IDL_PATH:     $IDL_PATH"
echo "IDL_DLM_PATH: $IDL_DLM_PATH"

# Generate/update version file

echo "------------------------------------------------------------------"
cd src

version_func="__version__"
cat >${version_func}.pro <<EOL
; This file is autogenerated at build time.
; It should not be committed to the repository.
function $version_func
    return, "$version"
end
EOL

# Build resolve statements

resolve=("resolve_routine, '${process}'")
for f in *_hooks__*.pro; do
    resolve+=("resolve_routine, '${f%.*}'")
done
resolve+=("resolve_all, class=['cdsatt','cdsdim','cdsgroup','cdsobject','cdsvararray','cdsvar','cdsvargroup','dsproc']")

join_by()
{
    local d=$1; shift
    echo -n "$1"; shift;
    printf "%s" "${@/#/$d}"
}

# Build the build command

idl_buffer="buffer=['BUF_PNNL_RTD_LIC_99781','${IDL_DIR}/license/license-BUF_PNNL_RTD_LIC_99781.bin']"
if (( $idl_version < 86 )); then
    idl_buffer="/embedded"
fi
resolve=$(join_by ' & ' "${resolve[@]}")
save="save, file='$objdir/$sav_file', $idl_buffer, /routines, variables=0"

# Build the .sav file

run "rm -f $objdir/$sav_file"
echo "$resolve & $save & exit" | ${IDL_DIR}/bin/idl

if [ -e "$objdir/$sav_file" ]; then
    echo "Installed $objdir/$sav_file"
else
    echo "Could not create sav file: $sav_file"
    exit 1
fi

cd ..

# Install shell script wrapper for IDL executable

echo "----------------------------------------------------------------------"

cd src

shopt -s nullglob
for f in *.sh.in
do
    outfile=${f%.sh.in}
    sed -e "s,@IDL_DIR@,$IDL_DIR,g" \
        -e "s,@IDL_PATH@,$IDL_PATH,g" \
        -e "s,@IDL_DLM_PATH@,$IDL_DLM_PATH,g" \
        -e "s,@IDLnn@,$IDLnn,g" \
        -e "s,@SAV_FILE@,$sav_file,g" \
        < $f > $bindir/$outfile

    chmod 0755 $bindir/$outfile
    echo "installed: $bindir/$outfile"
done

cd ..

exit 0

